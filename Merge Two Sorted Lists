/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if (!list1 && !list2)
        return NULL;
    if (!list1)
        return list2;
    if (!list2)
        return list1;
    ListNode *temp1 = list1;
    ListNode *temp2 = list2;
    ListNode *dummy = new ListNode(0); // dummy head
    ListNode *mover = dummy;
    while (temp1 && temp2)
    {
         if (temp1->val <= temp2->val) {
                mover->next = new ListNode(temp1->val);
                mover = mover->next;
                temp1 = temp1->next;
            } else {
                mover->next = new ListNode(temp2->val);
                mover = mover->next;
                temp2 = temp2->next;
            }
    }
    while (temp1)
    {
        mover->next = new ListNode(temp1->val);
            mover = mover->next;
        temp1 = temp1->next;
    }
    while (temp2)
    {
       mover->next = new ListNode(temp2->val);
        mover = mover->next;
        temp2 = temp2->next;
    }
    return dummy->next;
    }
};
